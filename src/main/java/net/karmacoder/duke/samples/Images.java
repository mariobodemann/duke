package net.karmacoder.duke.samples;

import net.karmacoder.duke.Image;

import java.awt.*;
import java.awt.image.BufferedImage;

import static java.awt.image.BufferedImage.TYPE_INT_RGB;

public class Images {

  public static Image duke() {
    return new Image() {

      @Override
      public int[] getPixels() {
        return new int[]{0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFEFEFE, 0xFCFCFC, 0x595959, 0x3D3D3D, 0xF2F2F2, 0xD6D6D6, 0xA1A1A1, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xF4F4F4, 0x818181, 0xAEAEAE, 0x4E4E4E, 0x131313, 0xC7C7C7, 0x4B4B4B, 0x0F0F0F, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFCFCFC, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xE4E4E4, 0x212121, 0x3C3C3C, 0x585858, 0x050505, 0x6F6F6F, 0x111111, 0x4F4F4F, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xBCBCBC, 0xB8B8B8, 0xFEFEFE, 0xFFFFFF, 0xFFFFFF, 0xFAFAFA, 0x565656, 0x040404, 0x272727, 0x010101, 0x0C0C0C, 0x020202, 0x838383, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xA7A7A7, 0x191919, 0x9B9B9B, 0xFBFBFB, 0xFFFFFF, 0xFFFFFF, 0xB3B3B3, 0x0C0C0C, 0x000000, 0x000000, 0x000000, 0x000000, 0x6B6B6B, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xB3B3B3, 0x040404, 0x0D0D0D, 0x8F8F8F, 0xFBFBFB, 0xFFFFFF, 0xF8F8F8, 0x656565, 0x000000, 0x000000, 0x000000, 0x000000, 0x3C3C3C, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xB5B5B5, 0x050505, 0x000000, 0x0C0C0C, 0x949494, 0xFAFAFA, 0x9D9D9D, 0x303030, 0x010101, 0x000000, 0x000000, 0x000000, 0x474747, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xB3B3B3, 0x050505, 0x000000, 0x000000, 0x121212, 0x9C9C9C, 0x505050, 0x262626, 0x1A1A1A, 0x000000, 0x000000, 0x262626, 0xB9B9B9, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xADADAD, 0x030303, 0x000000, 0x000000, 0x000000, 0x1F1F1F, 0xAFAFAF, 0xEDEDED, 0xD1D1D1, 0x727272, 0x1A1A1A, 0xA0A0A0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xA4A4A4, 0x010101, 0x000000, 0x000000, 0x000000, 0x000000, 0x3E3E3E, 0xE5E5E5, 0xFFFFFF, 0xFFFFFF, 0x7E7E7E, 0xC0C0C0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x989898, 0x000000, 0x020101, 0x291413, 0x581D1D, 0x490E10, 0x0D0102, 0x6D6E6E, 0xFAFAFA, 0xFFFFFF, 0x9E9E9E, 0xC1C1C1, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x898989, 0x000000, 0x62453F, 0xDD8F84, 0xF25F5C, 0xEA3035, 0x7C1216, 0x302F2F, 0xB4B4B4, 0xFFFFFF, 0x878787, 0xCBCBCB, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x757676, 0x160706, 0xD3776E, 0xFB9489, 0xF25B58, 0xF23035, 0xB4191F, 0x7E7777, 0x565757, 0x595959, 0x5D5D5D, 0xF3F2F2, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFEFEFE, 0x5C5D5D, 0x120303, 0xC74342, 0xF65352, 0xF23C3F, 0xEF252B, 0x8A1C21, 0xC1C1C1, 0x929292, 0x020202, 0x9A9A9A, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xEEEEEE, 0x414141, 0x6C6D6D, 0x743537, 0xB82024, 0xC31B21, 0x8D1A1E, 0x8C7A7B, 0xF9FAFA, 0xE5E5E5, 0x333333, 0xAEAEAE, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xB4B4B4, 0x343434, 0xE6E6E6, 0xCDCECE, 0x8F8283, 0x8B797A, 0xB4B2B3, 0xF5F6F6, 0xFFFFFF, 0xFFFFFF, 0x858585, 0x8E8E8E, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xEEEEEE, 0x444444, 0x4C4C4C, 0xFAFAFA, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xD1D1D1, 0x5E5E5E, 0xF1F1F1, 0xFFFFFF, 0xFEFEFE, 0x8B8B8B, 0x171717, 0x7B7B7B, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFAFAFA, 0x696969, 0xC1C1C1, 0xFFFFFF, 0xDFDFDF, 0x666666, 0x636363, 0xA5A5A5, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xA0A0A0, 0x868686, 0xFFFFFF, 0xD9D9D9, 0x7B7B7B, 0x5E5E5E, 0xCACACA, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xD5D5D5, 0x646464, 0xF4F4F4, 0xF4F4F4, 0x656565, 0x424242, 0xE7E7E7, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xF3F3F3, 0x646464, 0xD7D7D7, 0xFFFFFF, 0x686868, 0x464646, 0xF9F9F9, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x787878, 0xB6B6B6, 0xF5F5F5, 0x4A4A4A, 0x6A6A6A, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x8D8D8D, 0x9A9A9A, 0x919191, 0x0B0B0B, 0x8F8F8F, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFEFEFE, 0xFBFBFB, 0xFEFEFE, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x999999, 0x878787, 0x171717, 0x040404, 0xACACAC, 0xFFFFFF, 0xFFFFFF, 0xFAFAFA, 0xBDBDBD, 0x717171, 0x5F5F5F, 0x797979, 0xD0D0D0, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0x979797, 0x7E7D7D, 0xA1A1A1, 0x4C4C4C, 0xBDBDBD, 0xFFFFFF, 0xF0F0F0, 0x7F7F7F, 0x535353, 0xA1A1A1, 0xC8C8C8, 0xA3A3A3, 0x595959, 0xBDBDBD, 0xFFFFFF, 0xFFFFFF, 0x8F8F8F, 0x808080, 0xFFFFFF, 0x767676, 0xC2C2C2, 0xEAEAEA, 0x6D6D6D, 0x7D7D7D, 0xECECEC, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xD0D0D0, 0x5C5C5C, 0xD8D8D8, 0xFFFFFF, 0x808080, 0x929292, 0xFFFFFF, 0x7B7B7B, 0x636363, 0x676767, 0xA1A1A1, 0xFAFAFA, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xAEAEAE, 0x6D6D6D, 0xE3E3E3, 0x636363, 0xBFBFBF, 0xFFFFFF, 0xD4D4D4, 0x888888, 0xC9C9C9, 0xFEFEFE, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xFFFFFF, 0xF9F9F9, 0x787878, 0x383838, 0x727272, 0xF5F5F5};
      }

      @Override
      public int getWidth() {
        return 16;
      }

      @Override
      public int getHeight() {
        return 29;
      }
    };
  }

  public static Image fromBufferedImage(BufferedImage image) {
    return new UnScaledBufferedImage(image);
  }

  public static Image fromBufferedImage(BufferedImage image, float scale) {
    if (scale == 1.0f) {
      return new UnScaledBufferedImage(image);
    } else {
      int width = (int) (image.getWidth() * scale);
      int height = (int) (image.getHeight() * scale);
      return new ScaledBufferedImage(image, width, height);
    }
  }

  public static Image fromBufferedImage(BufferedImage image, int maxWidth, int maxHeight) {
    if ((maxWidth == image.getWidth() && maxHeight == image.getHeight()) ||
        (maxWidth == maxHeight && maxHeight <= 0)) {
      return new UnScaledBufferedImage(image);
    } else {
      return new ScaledBufferedImage(image, maxWidth, maxHeight);
    }
  }

  private static class UnScaledBufferedImage implements Image {
    private final int[] data;
    private final int width;
    private final int height;

    public UnScaledBufferedImage(BufferedImage image) {
      this.width = image.getWidth();
      this.height = image.getHeight();
      data = image.getRGB(
          0, 0,
          getWidth(), getHeight(),
          null,
          0,
          getWidth());
    }

    @Override
    public int[] getPixels() {
      return data;
    }

    @Override
    public int getWidth() {
      return width;
    }

    @Override
    public int getHeight() {
      return height;
    }
  }

  private static class ScaledBufferedImage implements Image {
    private final int[] data;
    private final int width;
    private final int height;

    public ScaledBufferedImage(BufferedImage image, int width, int height) {
      float aspectRatio = ((float) image.getWidth()) / image.getHeight();

      this.width = width <= 0 ? (int) (height * aspectRatio) : width;
      this.height = height <= 0 ? (int) (width / aspectRatio) : height;

      final BufferedImage scaledImage = new BufferedImage(getWidth(), getHeight(), TYPE_INT_RGB);
      Graphics2D graphics2D = scaledImage.createGraphics();
      graphics2D.drawImage(image, 0, 0, getWidth(), getHeight(), null);
      graphics2D.dispose();

      data = scaledImage.getRGB(0, 0, getWidth(), getHeight(), null, 0, getWidth());
    }

    @Override
    public int[] getPixels() {
      return data;
    }

    @Override
    public int getWidth() {
      return width;
    }

    @Override
    public int getHeight() {
      return height;
    }
  }
}
